{"version":3,"sources":["src/pages/sys/dict/DictForm.tsx","src/pages/sys/dict/index.tsx"],"sourcesContent":["import React from \"react\";\r\nimport DrawerForm from \"@/components/DrawerForm\";\r\nimport {request, useIntl} from \"@umijs/max\";\r\nimport {Form} from \"antd\";\r\nimport {ProFormSelect, ProFormText, ProFormTextArea} from \"@ant-design/pro-components\";\r\nimport {addDictInfo, getDictInfo, getSelectList, updateDictInfo} from \"@/services/sys/DictController\";\r\n\r\nconst DictForm = (props: {\r\n  id: any;\r\n  open?: boolean;\r\n  setOpen?: (open: boolean) => void;\r\n  onSuccess: () => void\r\n}) => {\r\n  const {id, open, setOpen, onSuccess} = props\r\n  const [form] = Form.useForm();\r\n  const intl = useIntl()\r\n  return (\r\n    <DrawerForm\r\n      request={async (params) => getDictInfo(params)}\r\n      id={id}\r\n      open={open}\r\n      setOpen={setOpen}\r\n      onSuccess={async (values: any) => {\r\n        if (id) {\r\n          await updateDictInfo(values);\r\n        } else {\r\n          await addDictInfo(values);\r\n        }\r\n        onSuccess();\r\n        return true;\r\n      }}\r\n      form={form}\r\n    >\r\n      <ProFormText\r\n        name={'id'}\r\n        hidden={true}\r\n      />\r\n      <ProFormSelect\r\n        name=\"parent\"\r\n        label={intl.formatMessage({id: 'pages.sys.resource.menu.parent'})}\r\n        showSearch={true}\r\n        request={async () => getSelectList()}\r\n      />\r\n      <ProFormText\r\n        name=\"code\"\r\n        disabled={id}\r\n        label={intl.formatMessage({id: 'pages.common.code'})}\r\n        rules={[{required: true}]}\r\n      />\r\n      <ProFormText\r\n        name=\"name\"\r\n        label={intl.formatMessage({id: 'pages.common.name.en'})}\r\n        rules={[{required: true}]}\r\n      />\r\n      <ProFormText\r\n        name=\"nameCn\"\r\n        label={intl.formatMessage({id: 'pages.common.name.zh'})}\r\n        rules={[{required: true}]}\r\n      />\r\n      <ProFormText\r\n        name=\"val\"\r\n        label={intl.formatMessage({id: 'pages.common.value'})}\r\n      />\r\n\r\n      <ProFormText\r\n        name=\"sortNum\"\r\n        label={intl.formatMessage({id: 'pages.common.sort.number'})}\r\n        rules={[{required: true}]}\r\n      />\r\n      <ProFormTextArea\r\n        name=\"remark\"\r\n        label={intl.formatMessage({id: 'pages.common.remark'})}\r\n      />\r\n    </DrawerForm>\r\n  )\r\n\r\n}\r\nexport default DictForm\r\n","import React, {useRef, useState} from \"react\";\r\n\r\nimport {ActionType, PageContainer, ProTable} from \"@ant-design/pro-components\";\r\nimport {request, useIntl} from \"@umijs/max\";\r\nimport {Button, message, Popconfirm} from \"antd\";\r\nimport {FormattedMessage} from \"@@/plugin-locale\";\r\nimport {PlusOutlined} from \"@ant-design/icons\";\r\nimport DictForm from \"@/pages/sys/dict/DictForm\";\r\nimport {history, useAccess} from \"@@/exports\";\r\nimport {DictSearchParams} from \"@/services/entity/Sys\";\r\nimport {deleteDictInfo, getDictList} from \"@/services/sys/DictController\";\r\n\r\nconst Dict: React.FC = () => {\r\n  const [open, setOpen] = useState(false);\r\n  const [id, setId] = useState(undefined);\r\n  const ref = useRef<ActionType>()\r\n  const intl = useIntl()\r\n  const permissionMap = useAccess();\r\n  const path = history.location.pathname\r\n  const write = permissionMap[path]\r\n  const columns: any = [\r\n\r\n    {\r\n      title: intl.formatMessage({id: 'pages.common.name.en'}),\r\n      dataIndex: 'name',\r\n      key: 'name',\r\n      width:300\r\n    },\r\n    {\r\n      title: intl.formatMessage({id: 'pages.common.name.zh'}),\r\n      dataIndex: 'nameCn',\r\n      key: 'nameCn',\r\n    },\r\n    {\r\n      title: intl.formatMessage({id: 'pages.common.value'}),\r\n      dataIndex: 'val',\r\n      key: 'val',\r\n    },\r\n    {\r\n      title: intl.formatMessage({id: 'pages.common.remark'}),\r\n      dataIndex: 'remark',\r\n      key: 'remark',\r\n    },\r\n    {\r\n      title: intl.formatMessage({id: 'pages.common.sort.number'}),\r\n      dataIndex: 'sortNum',\r\n      key: 'sortNum',\r\n      width: 100,\r\n      hideInSearch: true,\r\n    },\r\n    {\r\n\r\n      title: intl.formatMessage({id: 'pages.common.option'}),\r\n      valueType: 'option',\r\n      key: 'option',\r\n      // 固定\r\n      fixed: 'right',\r\n      render: (text: any, record: Record<any, any>, _: any, action: any) =>write&& [\r\n        <Button\r\n          type={'link'}\r\n          key=\"editable\"\r\n          onClick={() => {\r\n            setId(record.id)\r\n            setOpen(true)\r\n          }}\r\n        >\r\n          {intl.formatMessage({id: 'pages.common.edit'})}\r\n        </Button>,\r\n        <Popconfirm\r\n          key={'delete'}\r\n          title={intl.formatMessage({id: 'pages.confirm.delete'})}\r\n          onConfirm={async () => {\r\n            const {code, message:msg} = await deleteDictInfo(record);\r\n            action?.reload()\r\n            if (code === 200) {\r\n              message.success(msg)\r\n            } else {\r\n              message.error(msg)\r\n            }\r\n          }}\r\n        >\r\n          <Button type={'link'}\r\n                  key={'delete'}>\r\n            {intl.formatMessage({id: 'pages.common.delete'})}\r\n          </Button>\r\n        </Popconfirm>\r\n      ],\r\n    }\r\n  ]\r\n  return (\r\n    <PageContainer>\r\n      <ProTable\r\n        actionRef={ref}\r\n        request={async (params:DictSearchParams) => getDictList(params)}\r\n        toolBarRender={() => write&&[\r\n          <Button\r\n            key=\"button\"\r\n            icon={<PlusOutlined/>}\r\n            type=\"primary\"\r\n            onClick={() => {\r\n              setId(undefined)\r\n              setOpen(true)\r\n            }}\r\n          >\r\n            <FormattedMessage id=\"pages.common.new\"/>\r\n          </Button>,\r\n        ]}\r\n        columns={columns}\r\n      />\r\n      <DictForm\r\n        id={id}\r\n        open={open}\r\n        setOpen={setOpen}\r\n        onSuccess={() => {\r\n          setId(undefined)\r\n          ref.current?.reload()\r\n        }}\r\n      />\r\n    </PageContainer>\r\n  );\r\n};\r\n\r\nexport default Dict;\r\n"],"names":[],"mappings":"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"}